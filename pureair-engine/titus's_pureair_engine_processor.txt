@name pureair-engine/titus's_pureair_engine_processor
@inputs IncreaseTrainBrake DecreaseTrainBrake SetBrakeNotch EqualRes CFM LocoBrakePressure BrakeCutIn AirBrakeMode [LOCOMOTIVE_ENTITY]:entity
@outputs IndDrop EqDrop FlowSmooth CONSTANT [ENGINE_DATA_OUTPUT]:array 
@persist [SmoothTable]:table Loop State1 State2 Selector MasterPitch IndSmoothPOS IndSmoothNEG IndSmoothNEG_Cal IndDrop EqSmoothPOS EqSmoothNEG EqSmoothNEG_Cal EqDrop FlowSmooth FeedPressure 
@persist ApplySA ApplySR ApplySAN ReleaseSA ReleaseSR ReleaseSAN IndDrop_External SelectedEntity:entity Independant_MasterPitch AFFADE CFF CanSET ReleaseCOMPLETE
@persist [Automatic_application Automatic_application_end Automatic_flow Automatic_release_flow Independant_application Independant_flow Distributor]:string
@persist IsValid VC:string SILENT DEBUG Reset URL:string LocalVersion:string
@trigger none
@model models/bull/gates/processor.mdl

E = entity()
O = owner()

if(dupefinished() | duped()){reset()}
if(first()){ 


# SETTINGS

Automatic_application = "titus's_locomotive_propper_model_pack_2.4/loops/s_nippongallery_trainapplicationfull.wav"
Automatic_release_flow = "titus's_locomotive_propper_model_pack_2.4/loops/s_f40ph_servicerelease.wav"
Distributor = "titus's_locomotive_propper_model_pack_2.4/loops/s_f40ph_distributorrelease.wav"

Independant_MasterPitch = 105
Independant_application = "titus's_locomotive_propper_model_pack_2.4/loops/s_nippongalleryserviceloop2.wav"
Independant_flow = "titus's_locomotive_propper_model_pack_2.4/loops/s_nippongallery_servicerelease.wav"




#---- Scripts

function number smooth(Var,SmoothAmount,ID:string,DefaultVal){
    if(!SmoothTable:exists(ID)){
        SmoothTable[ID,number] = DefaultVal
    }
    
    local Smooth = SmoothTable[ID,number]    
    Smooth += (Var-Smooth) / SmoothAmount
    SmoothTable[ID,number] = Smooth
    return Smooth
}


function tsprint(Type:string,MSG:string){
    if(SILENT){ return }
    local StartString = "PUREAIR ENGINE"
    switch(Type){
        case "info", printColor(vec(0,255,0),"[" + StartString + "] ",vec(255),MSG) break
        case "notice", printColor(vec(0,150,255),"[" + StartString + " "+"| NOTICE] ",vec(255),MSG) break
        case "warning", printColor(vec(255,255,0),"[" + StartString + " "+"| WARNING] ",vec(255),MSG) break
        case "error", printColor(vec(255,0,0),"[" + StartString + " "+"| ERROR] ",vec(255),MSG) break
        case "command", printColor(vec(0,255,255),"[" + StartString + " "+"| COMMAND] ",vec(255),MSG) break
        case "debug", if(DEBUG){ printColor(vec(0,255,255),"[" + StartString + " "+"| DEBUG] ",vec(255),MSG) } break
    }
}


function tssound(Type:string){
    if(SILENT){ return }
    switch(Type){
        case "info", owner():soundPlay("rcsoundlib",0,"modern_alerts/lib/button26.wav") break
        case "info2", owner():soundPlay("rcsoundlib",0,"modern_alerts/lib/button27.wav") break
        case "alert", owner():soundPlay("rcsoundlib",0,"modern_alerts/lib/button01.wav") break
        case "complete", owner():soundPlay("rcsoundlib",0,"modern_alerts/lib/button05.wav") break
        case "complete2", owner():soundPlay("rcsoundlib",0,"modern_alerts/lib/button08.wav") break
        case "warning", owner():soundPlay("rcsoundlib",0,"modern_alerts/lib/button12.wav") break
        case "error", owner():soundPlay("rcsoundlib",0,"modern_alerts/lib/button15.wav") break
        case "debug", if(DEBUG){ owner():soundPlay("rcsoundlib",0,"modern_alerts/lib/button17.wav") } break
    }
} 



#---- Workers


function beginHTTPSRequest(URL:string){
#ifdef httpRequest(string)
    httpRequest(URL)
#else
    tsprint("warning","HTTP Core is disabled on your server. Automatic version checking is disabled.")  
#endifs
}


function https_caller(){
#HTTPS Worker Script
#ifdef httpClk()
    if(httpClk()){
        if(httpData()!=""){
            #print(httpData())
            
        }else{
            tsprint("info","Could not find the version info online.")
        }
    }
#endif
}


function https_version_caller(){
#HTTPS Version Checking [via www.titusstudios.net]
#ifdef httpClk()
    if(httpClk()){
        if(httpData()!=""){
            #print(httpData())
            
            local Lines = httpData():explode("\n")
        
            local WebVersion = Lines[1,string]:explode(":")[2,string]
            local VersionName = Lines[2,string]:explode(":")[2,string]
            local MasterName = Lines[3,string]:explode(":")[2,string]
            local ValidChip = Lines[4,string]:explode(":")[2,string]
            local WebsiteVersionArray = WebVersion:explode(".")
            local LocalVersionArray = LocalVersion:explode(".")
            local WebsiteVersion = (WebsiteVersionArray[1,string] + WebsiteVersionArray[2,string] + WebsiteVersionArray[3,string]):toNumber()
            local LocalVersionCOMPILED = (LocalVersionArray[1,string] + LocalVersionArray[2,string] + LocalVersionArray[3,string]):toNumber()
            
            setName(MasterName)

            IsValid = ValidChip:toNumber()

            if(LocalVersionCOMPILED == WebsiteVersion){
                #tsprint("notice","nil")
                tsprint("debug","Version is the same as the GitHub Repo")
            }
            elseif(LocalVersionCOMPILED > WebsiteVersion){
                tsprint("notice","You are running a dev version of the PureAir Engine (newer than master version)!")
                tssound("info")
            }
            elseif(LocalVersionCOMPILED < WebsiteVersion){
                tsprint("notice","The PureAir Engine has been updated. Get the lastest version on the GitHub. [https://github.com/titus-studios-media/PureAir]")
                tssound("info2")
            }
            
        }
        else{
            tsprint("info","Could not find the version info online.")
            tssound("info")
        }
    }
#endif
}


#---- HTTPS Begin Request [via TitusStudios website] 

runOnHTTP(1)
beginHTTPSRequest("https://titusstudios.net/data/static/experssion2/pureair-validation-script.txt")
#O:soundPlay("load-complete",0,"modern_alerts/lib/button34.wav")

CONSTANT = 1
Reset = 0
LocalVersion = "1.0.2"
SILENT = 0
DEBUG = 0
}



#---- Running Code


if(->LOCOMOTIVE_ENTITY){
    SelectedEntity = LOCOMOTIVE_ENTITY
}
elseif(!->LOCOMOTIVE_ENTITY){
    SelectedEntity = E
}


interval(100) #sets the clock / refresh rate of the E2


if(BrakeCutIn){

    Reset = 1

#---- Delta Smoothing Galore

    IndSmoothPOS = smooth(LocoBrakePressure,1,"pos-ind",0) 
    IndSmoothNEG = smooth(LocoBrakePressure,1.7,"neg-ind",0) 
    IndSmoothNEG_Cal = LocoBrakePressure - IndSmoothNEG
    IndDrop = ((IndSmoothPOS) - (IndSmoothNEG_Cal + IndSmoothPOS)*1)
    IndDrop_External = smooth(((IndSmoothPOS) - (IndSmoothNEG_Cal + IndSmoothPOS)*1),3,"external_ind_flow",0)
    FlowSmooth = smooth(abs(CFM),25,"flowsim",0)

    EqSmoothPOS = smooth(EqualRes,3,"pos-eq",0) 
    EqSmoothNEG = smooth(EqualRes,7,"neg-eq",0) 
    EqSmoothNEG_Cal = EqualRes - EqSmoothNEG
    EqDrop = smooth(((EqSmoothPOS) - (EqSmoothNEG_Cal + EqSmoothPOS)*1),5,"autodrop",0)


#---- Automatic Brake

# Automatic Apply

if(changed(IncreaseTrainBrake & !ApplySAN & SetBrakeNotch == 1)&IncreaseTrainBrake & !ApplySAN & SetBrakeNotch == 1){
    SelectedEntity:soundPlay("autoapp",0,Automatic_application)
    ApplySA = 1
}

if(changed(ApplySA)&ApplySA){
    ApplySAN = 1    
}

if(changed(DecreaseTrainBrake & ApplySA)&DecreaseTrainBrake & ApplySA){
    soundStop("autoapp",1.5)    
    #SelectedEntity:soundPlay("autoappend",0,Automatic_application_end)
    timer("san_stop",2000)
}

if(changed((round((EqDrop),1.2) == 0) & ApplySA)&(round((EqDrop),1.2) == 0) & ApplySA){
    ApplySA = 0
    soundStop("autoapp",3)    
    timer("san_stop",3500)
}

if(changed(clk("san_stop"))&clk("san_stop")){
    ApplySAN = 0
    stoptimer("san_stop")    
}



#---- Automatic Release


if(SetBrakeNotch == 0 & ReleaseCOMPLETE){
    CanSET = 0    
}
elseif(SetBrakeNotch == !0){
    CanSET = 1   
    ReleaseCOMPLETE = 0
}

if(changed(DecreaseTrainBrake & !ReleaseSAN & CanSET)&DecreaseTrainBrake & !ReleaseSAN & CanSET){

    SelectedEntity:soundPlay("autorel",0,Automatic_release_flow)
    soundVolume("autorel",0)

    SelectedEntity:soundPlay("dist",0,Distributor)

    AFFADE = 1
    ReleaseSA = 1
    ReleaseCOMPLETE = 1
}


if(AFFADE){
    CFF = smooth(0.7,5,"release_fade",0)
    soundVolume("autorel",CFF)   
}
else{
    CFF = 0  
    SmoothTable:removeNumber("release_fade")
}


if(changed(ReleaseSA)&ReleaseSA){
    ReleaseSAN = 1    
}

if(changed(IncreaseTrainBrake & ApplySA)&IncreaseTrainBrake & ApplySA){

    soundStop("autorel",2)    
    soundStop("dist",2)    

    AFFADE = 0
    timer("san_stop2",2500)
}



soundVolume("dist",(FlowSmooth/25))



if(changed((round((EqDrop),2) == 0) & ReleaseSA)&(round((EqDrop),2) == 0) & ReleaseSA){

    soundVolume("autorel",0.7)
    soundStop("autorel",6)

    AFFADE = 0
    timer("san_stop2",6500)
}

if(changed(clk("san_stop2"))&clk("san_stop2")){
    ReleaseSAN = 0
    stoptimer("san_stop2")    
}



#---- Independant Brake


soundVolume("indmain",abs(IndDrop*1))
soundPitch("indmain",Independant_MasterPitch)
soundVolume("indflow",abs(IndDrop_External/1.3))

}
elseif(!BrakeCutIn){
    Reset = 0
    soundStop("autoapp",5)
    soundStop("autorel",5)
    soundStop("dist",5)
    soundStop("indmain",5)
    soundStop("indflow",5)
    stoptimer("san_stop")
    stoptimer("san_stop2")
}


if(changed(Reset)&Reset){

    SelectedEntity:soundPlay("indmain",0,Independant_application)
    SelectedEntity:soundPlay("indflow",0,Independant_flow) 

    soundVolume("indmain",0)
    soundVolume("indflow",0)
} 



#---- Chat Commands

runOnChat(1)

if(chatClk(owner())){
        LS = owner():lastSaid()
        Command = LS:explode(" ")
        
        VC = IsValid ? "TRUE" : "FALSE"

        if(Command[1,string] == "$command"){
            if(Command[2,string] == "?valid"){
            tsprint("command","Chip Valid? = "+VC)
            hideChat(1)
            }
            if(Command[2,string] == "reset"){
            tsprint("command","Resetting, please wait...")
            hideChat(1)
            reset()
            }
        }
}




ENGINE_DATA_OUTPUT = array(
    ApplySA,
    ApplySR,
    ApplySAN,
    ReleaseSA,
    ReleaseSR,
    ReleaseSAN,
    IndDrop_External,
    Independant_MasterPitch,
    AFFADE,
    CFF,
    Loop,
    State1,
    State2,
    Selector,
    MasterPitch,
    IndSmoothPOS,
    IndSmoothNEG,
    IndSmoothNEG_Cal,
    IndDrop,
    EqSmoothPOS,
    EqSmoothNEG,
    EqSmoothNEG_Cal,
    EqDrop,
    FlowSmooth,
    FeedPressure,
    CanSET
)

https_version_caller()

