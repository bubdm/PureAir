@name pureair-engine/titus's_pureair_engine_processor
@inputs AutoIncr AutoDecr EqualRes CFM Independant_Pressure BrakeCutIn AirBrakeMode [LOCOMOTIVE_ENTITY]:entity
@outputs IndDrop EqDrop FlowSmooth CONSTANT [ENGINE_DATA_OUTPUT]:array
@persist SmoothTable:table Loop State1 State2 Selector MasterPitch IndSmoothPOS IndSmoothNEG IndSmoothNEG_Cal IndDrop EqSmoothPOS EqSmoothNEG EqSmoothNEG_Cal EqDrop FlowSmooth FeedPressure 
@persist ApplySA ApplySR ApplySAN ReleaseSA ReleaseSR ReleaseSAN IndDrop_External SelectedEntity:entity Independant_MasterPitch Automatic_release_whine_FEATURE AFFADE CFF
@persist [Automatic_application Automatic_application_end Automatic_flow Automatic_release_whine Automatic_release_flow Independant_application Independant_flow Distributor]:string
@persist IsValid VC:string SILENT DEBUG Reset URL:string LocalVersion:string
@trigger none
@model models/bull/gates/processor.mdl


if(dupefinished() | duped()){reset()}
if(first()){ 

#INCLUDE LIB
#include "pureair-engine/config/defaultengine"
#include "pureair-engine/resources/entity-selection"
#include "pureair-engine/scripts/delta-dampening"
#include "pureair-engine/scripts/fade_in"
#include "pureair-engine/scripts/localprint"
#include "pureair-engine/scripts/localsound"
#include "pureair-engine/workers/https-beginrequest-worker"
#include "pureair-engine/workers/https-worker"
#include "pureair-engine/workers/https-version-worker"

# SETTINGS

Automatic_application = "titus's_locomotive_propper_model_pack_2.4/loops/s_nippongallery_trainapplicationfull.wav"
Automatic_release_whine_FEATURE = 0
Automatic_release_whine = "titus's_locomotive_propper_model_pack_2.4/loops/s_nippongallery_brakereleasehisswhine.wav"
Automatic_release_flow = "titus's_locomotive_propper_model_pack_2.4/loops/s_f40ph_servicerelease.wav"

Distributor = "titus's_locomotive_propper_model_pack_2.4/loops/s_f40ph_distributorrelease.wav"

Independant_MasterPitch = 105
Independant_application = "titus's_locomotive_propper_model_pack_2.4/loops/s_nippongalleryserviceloop2.wav"
Independant_flow = "titus's_locomotive_propper_model_pack_2.4/loops/s_nippongallery_servicerelease.wav"


#---- HTTPS Begin Request [via TitusStudios website] 

runOnHTTP(1)
beginHTTPSRequest("https://titusstudios.net/data/static/experssion2/pureair-validation-script.txt")
#O:soundPlay("load-complete",0,"modern_alerts/lib/button34.wav")

CONSTANT = 1
Reset = 0
LocalVersion = "1.0.1"
}

interval(150) 

if(BrakeCutIn){
Reset = 1

IndSmoothPOS = smooth(Independant_Pressure,1,"pos-ind",0) 
IndSmoothNEG = smooth(Independant_Pressure,1.7,"neg-ind",0) 
IndSmoothNEG_Cal = Independant_Pressure - IndSmoothNEG
IndDrop = ((IndSmoothPOS) - (IndSmoothNEG_Cal + IndSmoothPOS)*1)
IndDrop_External = smooth(((IndSmoothPOS) - (IndSmoothNEG_Cal + IndSmoothPOS)*1),3,"external_ind_flow",0)
FlowSmooth = smooth(abs(CFM),25,"flowsim",0)

EqSmoothPOS = smooth(EqualRes,3,"pos-eq",0) 
EqSmoothNEG = smooth(EqualRes,7,"neg-eq",0) 
EqSmoothNEG_Cal = EqualRes - EqSmoothNEG
EqDrop = smooth(((EqSmoothPOS) - (EqSmoothNEG_Cal + EqSmoothPOS)*1),5,"autodrop",0)

#---- Automatic Brake

# Automatic Apply

if(changed(AutoIncr & !ApplySAN)&AutoIncr & !ApplySAN){
SelectedEntity:soundPlay("autoapp",0,Automatic_application)
ApplySA = 1
}

if(changed(ApplySA)&ApplySA){
ApplySAN = 1    
}

if(changed(AutoDecr & ApplySA)&AutoDecr & ApplySA){
soundStop("autoapp",1.5)    
#SelectedEntity:soundPlay("autoappend",0,Automatic_application_end)
timer("san_stop",2000)
}

if(changed((round((EqDrop),1.2) == 0) & ApplySA)&(round((EqDrop),1.2) == 0) & ApplySA){
ApplySA = 0
soundStop("autoapp",3)    
timer("san_stop",3500)
}

if(changed(clk("san_stop"))&clk("san_stop")){
ApplySAN = 0
stoptimer("san_stop")    
}


# Automatic Release

if(changed(AutoDecr & !ReleaseSAN)&AutoDecr & !ReleaseSAN){
SelectedEntity:soundPlay("autorel",0,Automatic_release_flow)
soundVolume("autorel",0)
AFFADE = 1
SelectedEntity:soundPlay("dist",0,Distributor)
if(Automatic_release_whine_FEATURE){
SelectedEntity:soundPlay("autowhine",0,Automatic_release_whine)
}
ReleaseSA = 1
}

if(AFFADE){
CFF = smooth(0.7,5,"release_fade",0)
soundVolume("autorel",CFF)   
}
else{
CFF = 0  
SmoothTable:removeNumber("release_fade")
}

if(changed(ReleaseSA)&ReleaseSA){
ReleaseSAN = 1    
}

if(changed(AutoIncr & ApplySA)&AutoIncr & ApplySA){
soundStop("autorel",2)    
soundStop("dist",2)    
AFFADE = 0
if(Automatic_release_whine_FEATURE){
soundStop("autowhine",2)  
}
timer("san_stop2",2500)
}

soundVolume("dist",(FlowSmooth/25))

if(changed((round((EqDrop),2) == 0) & ReleaseSA)&(round((EqDrop),2) == 0) & ReleaseSA){
    
soundVolume("autorel",0.7)
soundStop("autorel",6)
AFFADE = 0

if(Automatic_release_whine_FEATURE){
soundVolume("autowhine",FlowSmooth/(36))
}

timer("san_stop2",6500)
}

if(changed(clk("san_stop2"))&clk("san_stop2")){
ReleaseSAN = 0
stoptimer("san_stop2")    
}


#---- Independant Brake

soundVolume("indmain",abs(IndDrop*1))
soundPitch("indmain",Independant_MasterPitch)
soundVolume("indflow",abs(IndDrop_External/1.3))

}
elseif(!BrakeCutIn){
Reset = 0
soundStop("autoapp",5)
soundStop("autorel",5)
soundStop("dist",5)
if(Automatic_release_whine_FEATURE){
soundStop("autowhine",5)
}
soundStop("indmain",5)
soundStop("indflow",5)
stoptimer("san_stop")
stoptimer("san_stop2")
}

if(changed(Reset)&Reset){
SelectedEntity:soundPlay("indmain",0,Independant_application)
SelectedEntity:soundPlay("indflow",0,Independant_flow)   
soundVolume("indmain",0)
soundVolume("indflow",0)
} 


runOnChat(1)

if(chatClk(owner())){
        LS = owner():lastSaid()
        Command = LS:explode(" ")
        
        VC = IsValid ? "TRUE" : "FALSE"

        if(Command[1,string] == "$command"){
            if(Command[2,string] == "?valid"){
            tsprint("command","Chip Valid? = "+VC)
            hideChat(1)
            }
        }
}


https_version_caller()

ENGINE_DATA_OUTPUT = array(ApplySA,ApplySR,ApplySAN,ReleaseSA,ReleaseSR,ReleaseSAN,IndDrop_External,Independant_MasterPitch,Automatic_release_whine_FEATURE,AFFADE,CFF,Loop,State1,State2,Selector,MasterPitch,IndSmoothPOS,IndSmoothNEG,IndSmoothNEG_Cal,IndDrop,EqSmoothPOS,EqSmoothNEG,EqSmoothNEG_Cal,EqDrop,FlowSmooth,FeedPressure)

